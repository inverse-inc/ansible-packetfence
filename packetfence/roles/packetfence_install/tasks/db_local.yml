---
# code from ansible-role-openio-galera (secure_install.yml)
- name: check if root password has already be set
  command: mysql -e ';'
  register: packetfence_install__register_db_root_check
  changed_when: false
  failed_when: false

- name: set the mariadb root password if not set
  command: 'mysqladmin -u root password "{{ packetfence_install__database_root_pass }}"'
  changed_when: false
  when: packetfence_install__register_db_root_check.rc == 0
  ignore_errors: "{{ ansible_check_mode }}"

- name: delete anonymous connections
  mysql_user:
    login_user: "{{ packetfence_install__database_root_user }}"
    login_password: "{{ packetfence_install__database_root_pass }}"
    login_unix_socket: "{{ packetfence_install__database_socket }}"
    name: ""
    state: absent
  ignore_errors: "{{ ansible_check_mode }}"

- name: secure the mariadb root user for localhost
  mysql_user:
    login_user: "{{ packetfence_install__database_root_user }}"
    login_password: "{{ packetfence_install__database_root_pass }}"
    login_unix_socket: "{{ packetfence_install__database_socket }}"
    name: "{{ packetfence_install__database_root_user }}"
    password: "{{ packetfence_install__database_root_pass }}"
    host: "{{ item }}"
    state: present
  loop:
    - ::1
    - 127.0.0.1
    - localhost
  ignore_errors: "{{ ansible_check_mode }}"

- name: remove the mariadb test database
  mysql_db:
    name: test
    login_user: "{{ packetfence_install__database_root_user }}"
    login_password: "{{ packetfence_install__database_root_pass }}"
    login_unix_socket: "{{ packetfence_install__database_socket }}"
    state: absent
  ignore_errors: "{{ ansible_check_mode }}"

- name: ensure pf db is present
  mysql_db:
    name: "{{ packetfence_install__database_db }}"
    login_user: "{{ packetfence_install__database_root_user }}"
    login_password: "{{ packetfence_install__database_root_pass }}"
    login_unix_socket: "{{ packetfence_install__database_socket }}"
    state: present
  register: packetfence_install__register_db_database

- name: ensure pf tables are present
  mysql_db:
    name: "{{ packetfence_install__database_db }}"
    login_user: "{{ packetfence_install__database_root_user }}"
    login_password: "{{ packetfence_install__database_root_pass }}"
    login_unix_socket: "{{ packetfence_install__database_socket }}"
    state: import
    target: "{{ packetfence_install__db_dir }}/pf-schema.sql"
  when: packetfence_install__register_db_database is changed
    
# user need to be create after tables
- name: ensure pf user created with rights on db
  mysql_user:
    login_user: "{{ packetfence_install__database_root_user }}"
    login_password: "{{ packetfence_install__database_root_pass }}"
    login_unix_socket: "{{ packetfence_install__database_socket }}"
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    priv: "{{ item.priv }}"
    append_privs: "{{ item.append_privs }}"
    host: "{{ item.host }}"
    state: present
  loop: "{{ packetfence_install__database_users }}"
  # avoid display password for each item of the loop
  loop_control:
    label: "host: {{ item['host'] }}, name: {{ item['name'] }}, priv: {{ item['priv'] }}"
